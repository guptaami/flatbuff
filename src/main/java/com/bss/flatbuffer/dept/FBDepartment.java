// automatically generated by the FlatBuffers compiler, do not modify

package com.bss.flatbuffer.dept;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FBDepartment extends Table {
	public static FBDepartment getRootAsFBDepartment(ByteBuffer _bb) {
		return getRootAsFBDepartment(_bb, new FBDepartment());
	}

	public static FBDepartment getRootAsFBDepartment(ByteBuffer _bb, FBDepartment obj) {
		_bb.order(ByteOrder.LITTLE_ENDIAN);
		return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
	}

	public void __init(int _i, ByteBuffer _bb) {
		bb_pos = _i;
		bb = _bb;
	}

	public FBDepartment __assign(int _i, ByteBuffer _bb) {
		__init(_i, _bb);
		return this;
	}

	public String departmentName() {
		int o = __offset(4);
		return o != 0 ? __string(o + bb_pos) : null;
	}

	public ByteBuffer departmentNameAsByteBuffer() {
		return __vector_as_bytebuffer(4, 1);
	}

	public String departmentTag() {
		int o = __offset(6);
		return o != 0 ? __string(o + bb_pos) : null;
	}

	public ByteBuffer departmentTagAsByteBuffer() {
		return __vector_as_bytebuffer(6, 1);
	}

	public int departmentId() {
		int o = __offset(8);
		return o != 0 ? bb.getInt(o + bb_pos) : 0;
	}

	public FBBook books(int j) {
		return books(new FBBook(), j);
	}

	public FBBook books(FBBook obj, int j) {
		int o = __offset(10);
		return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
	}

	public int booksLength() {
		int o = __offset(10);
		return o != 0 ? __vector_len(o) : 0;
	}

	public FBStudent students(int j) {
		return students(new FBStudent(), j);
	}

	public FBStudent students(FBStudent obj, int j) {
		int o = __offset(12);
		return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
	}

	public int studentsLength() {
		int o = __offset(12);
		return o != 0 ? __vector_len(o) : 0;
	}

	public static int createFBDepartment(FlatBufferBuilder builder, int departmentNameOffset, int departmentTagOffset,
			int departmentId, int booksOffset, int studentsOffset) {
		builder.startObject(5);
		FBDepartment.addStudents(builder, studentsOffset);
		FBDepartment.addBooks(builder, booksOffset);
		FBDepartment.addDepartmentId(builder, departmentId);
		FBDepartment.addDepartmentTag(builder, departmentTagOffset);
		FBDepartment.addDepartmentName(builder, departmentNameOffset);
		return FBDepartment.endFBDepartment(builder);
	}

	public static void startFBDepartment(FlatBufferBuilder builder) {
		builder.startObject(5);
	}

	public static void addDepartmentName(FlatBufferBuilder builder, int departmentNameOffset) {
		builder.addOffset(0, departmentNameOffset, 0);
	}

	public static void addDepartmentTag(FlatBufferBuilder builder, int departmentTagOffset) {
		builder.addOffset(1, departmentTagOffset, 0);
	}

	public static void addDepartmentId(FlatBufferBuilder builder, int departmentId) {
		builder.addInt(2, departmentId, 0);
	}

	public static void addBooks(FlatBufferBuilder builder, int booksOffset) {
		builder.addOffset(3, booksOffset, 0);
	}

	public static int createBooksVector(FlatBufferBuilder builder, int[] data) {
		builder.startVector(4, data.length, 4);
		for (int i = data.length - 1; i >= 0; i--)
			builder.addOffset(data[i]);
		return builder.endVector();
	}

	public static void startBooksVector(FlatBufferBuilder builder, int numElems) {
		builder.startVector(4, numElems, 4);
	}

	public static void addStudents(FlatBufferBuilder builder, int studentsOffset) {
		builder.addOffset(4, studentsOffset, 0);
	}

	public static int createStudentsVector(FlatBufferBuilder builder, int[] data) {
		builder.startVector(4, data.length, 4);
		for (int i = data.length - 1; i >= 0; i--)
			builder.addOffset(data[i]);
		return builder.endVector();
	}

	public static void startStudentsVector(FlatBufferBuilder builder, int numElems) {
		builder.startVector(4, numElems, 4);
	}

	public static int endFBDepartment(FlatBufferBuilder builder) {
		int o = builder.endObject();
		return o;
	}

	public static void finishFBDepartmentBuffer(FlatBufferBuilder builder, int offset) {
		builder.finish(offset);
	}
}
